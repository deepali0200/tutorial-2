const express = require('express')
const path = require('path')

const {open} = require('sqlite')
const sqlite3 = require('sqlite3')
const app = express()
app.use(express.json())

const dbPath = path.join(__dirname, 'moviesData.db')


let db = null

const intialize = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    })
    app.listen(3000, () =>
      console.log('Server is Running at http://localhost:3000/'),
    )
  } catch (e) {
    console.log(`db error ${e.message}`)
    process.exit(1)
  }
}
intialize()

function converting(dbObject) {
  return {movieName: dbObject.movie_name}
}
///const convertDbObjectToResponseObject = dbObject => {
// return {
//  playerId: dbObject.player_id,
//  playerName: dbObject.player_name,
//  jerseyNumber: dbObject.jersey_number,
// role: dbObject.role,
// }
//}

app.get('/movies/', async (request, response) => {
  const a = `
    SELECT
      movie_name
    FROM
     movie
    `
  const b = await db.all(a)
  response.send(b.map(dbObject => converting(dbObject)))
})

app.post('/movies/', async (request, response) => {
  const details = request.body
  const {directorId, movieName, leadActor} = details
  const api2 = `
    INSERT INTO
      movie (directorId, movieName,leadActor)
    VALUES(
        '${directorId}',
        '${movieName}',
        '${leadActor}'
      );`

  const db1 = await db.run(api2)
  response.send('Movie Successfully Added')
})

app.get('/movies/:movieId/', async (request, response) => {
  const {movieId} = request.params
  const api3 = `
    SELECT
      movie_id as movieId,
      director_id as directorId,
      movie_name as movieName,
    lead_actor as leadActor
    FROM
      movie
    WHERE
      movie_id ='${movieId}';`
  const db2 = await db.get(api3)
  response.send(db2)
})

app.put('/movies/:movieId/', async (request, response) => {
  const {movieId} = request.params
  const details = request.body
  const {directorId, movieName, leadActor} = details
  const api4 = `
    UPDATE
        movie
    SET
      director_id='${directorId}',
      movie_name='${movieName}',
      lead_actor='${leadActor}'
      
    WHERE
      movie_id ='${movieId}';`
  await db.run(api4)
  response.send('Movie Details Updated')
})

app.delete('/movies/:movieId/', async (request, response) => {
  const {movieId} = request.params
  const api5 = `
    DELETE FROM
      movie
    WHERE
      movie_id ='${movieId}';`
  await db.run(api5)
  response.send('Movie Removed')
})

function convertingCase(dbObject) {
  return {
    directorId: dbObject.director_id,
    directorName: dbObject.director_name,
  }
}

app.get('/directors/', async (request, response) => {
  const getDirector = `
    SELECT
    director_id,director_name
    FROM
     director
    `
  const directorArray = await db.all(getDirector)
  response.send(directorArray.map(dbObject => convertingCase(dbObject)))
})

app.get('/directors/:directorId/movies/', async (request, response) => {
  const {directorId} = request.params
  const responseQuery = `
    SELECT
    movie.movie_name as movieName
    FROM
     director NATURAL JOIN movie
     where director.director_id='${directorId}';
    `
  const result = await db.all(responseQuery)
  response.send(result)
})
module.exports = app
